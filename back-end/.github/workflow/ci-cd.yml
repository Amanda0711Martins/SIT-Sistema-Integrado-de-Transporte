name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, release/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Run tests and generate coverage report
        run: mvn -B test jacoco:report

      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-coverage
          path: target/site/jacoco/

      - name: SonarQube Scan
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: SonarSource/sonarqube-scan-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run tests with coverage
        working-directory: ./frontend
        run: npm run coverage

      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-coverage
          path: frontend/coverage/

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [build-and-test-backend, build-and-test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push API Gateway Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./api-gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/logistica-api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/logistica-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - uses: actions/checkout@v3

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          # Substituir variÃ¡veis nos arquivos YAML do Kubernetes
          sed -i 's|${IMAGE_TAG}|${{ github.sha }}|g' k8s/*.yaml
          sed -i 's|${DOCKERHUB_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g' k8s/*.yaml
          
          # Aplicar configuraÃ§Ãµes do Kubernetes
          kubectl apply -f k8s/

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n logistica
          kubectl rollout status deployment/frontend -n logistica

      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "Deployment to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} completed successfully. ðŸš€"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}